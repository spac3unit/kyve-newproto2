// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/fees/v1beta1/fees.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the fees module parameters.
type Params struct {
	// min_gas_price defines the minimum gas price value for all transactions.
	MinGasPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=min_gas_price,json=minGasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_gas_price"`
	// burn_ratio defines the ratio of transaction fees burnt.
	BurnRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=burn_ratio,json=burnRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_ratio"`
	// gas_adjustments ...
	GasAdjustments []GasAdjustment `protobuf:"bytes,3,rep,name=gas_adjustments,json=gasAdjustments,proto3" json:"gas_adjustments"`
	// gas_refunds ...
	GasRefunds []GasRefund `protobuf:"bytes,4,rep,name=gas_refunds,json=gasRefunds,proto3" json:"gas_refunds"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_530f5bf545bb8898, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetGasAdjustments() []GasAdjustment {
	if m != nil {
		return m.GasAdjustments
	}
	return nil
}

func (m *Params) GetGasRefunds() []GasRefund {
	if m != nil {
		return m.GasRefunds
	}
	return nil
}

// GasAdjustment ...
type GasAdjustment struct {
	// type ...
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *GasAdjustment) Reset()         { *m = GasAdjustment{} }
func (m *GasAdjustment) String() string { return proto.CompactTextString(m) }
func (*GasAdjustment) ProtoMessage()    {}
func (*GasAdjustment) Descriptor() ([]byte, []int) {
	return fileDescriptor_530f5bf545bb8898, []int{1}
}
func (m *GasAdjustment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasAdjustment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasAdjustment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasAdjustment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasAdjustment.Merge(m, src)
}
func (m *GasAdjustment) XXX_Size() int {
	return m.Size()
}
func (m *GasAdjustment) XXX_DiscardUnknown() {
	xxx_messageInfo_GasAdjustment.DiscardUnknown(m)
}

var xxx_messageInfo_GasAdjustment proto.InternalMessageInfo

func (m *GasAdjustment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GasAdjustment) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// GasRefund ...
type GasRefund struct {
	// type ...
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// fraction ...
	Fraction github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=fraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fraction"`
}

func (m *GasRefund) Reset()         { *m = GasRefund{} }
func (m *GasRefund) String() string { return proto.CompactTextString(m) }
func (*GasRefund) ProtoMessage()    {}
func (*GasRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_530f5bf545bb8898, []int{2}
}
func (m *GasRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasRefund.Merge(m, src)
}
func (m *GasRefund) XXX_Size() int {
	return m.Size()
}
func (m *GasRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_GasRefund.DiscardUnknown(m)
}

var xxx_messageInfo_GasRefund proto.InternalMessageInfo

func (m *GasRefund) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "kyve.fees.v1beta1.Params")
	proto.RegisterType((*GasAdjustment)(nil), "kyve.fees.v1beta1.GasAdjustment")
	proto.RegisterType((*GasRefund)(nil), "kyve.fees.v1beta1.GasRefund")
}

func init() { proto.RegisterFile("kyve/fees/v1beta1/fees.proto", fileDescriptor_530f5bf545bb8898) }

var fileDescriptor_530f5bf545bb8898 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4b, 0x32, 0x41,
	0x18, 0xc7, 0x77, 0x75, 0x91, 0xd7, 0x11, 0xdf, 0x97, 0x77, 0x88, 0x58, 0x42, 0x56, 0xf1, 0x10,
	0x76, 0x68, 0x17, 0xeb, 0xd8, 0x29, 0x2d, 0x84, 0xa2, 0x92, 0x3d, 0x04, 0x75, 0x91, 0xd9, 0x75,
	0x5c, 0xb7, 0x65, 0x66, 0x64, 0x66, 0xd6, 0xf2, 0xbf, 0xe8, 0x5f, 0xea, 0xe6, 0xd1, 0x63, 0x74,
	0x90, 0xd0, 0x7f, 0x24, 0x66, 0xdc, 0xc4, 0xc8, 0x93, 0xa7, 0x79, 0x7e, 0x7e, 0x9e, 0x67, 0xbe,
	0x3c, 0xa0, 0x92, 0x4c, 0xc6, 0xd8, 0x1b, 0x60, 0x2c, 0xbc, 0x71, 0x33, 0xc0, 0x12, 0x35, 0xb5,
	0xe3, 0x8e, 0x38, 0x93, 0x0c, 0xfe, 0x57, 0x59, 0x57, 0x07, 0xb2, 0xec, 0xc1, 0x5e, 0xc4, 0x22,
	0xa6, 0xb3, 0x9e, 0xb2, 0x56, 0x85, 0xf5, 0xb7, 0x1c, 0x28, 0x74, 0x11, 0x47, 0x44, 0x40, 0x1f,
	0x94, 0x49, 0x4c, 0x7b, 0x11, 0x12, 0xbd, 0x11, 0x8f, 0x43, 0x6c, 0x9b, 0x35, 0xb3, 0x51, 0x6c,
	0xb9, 0xd3, 0x79, 0xd5, 0xf8, 0x98, 0x57, 0x0f, 0xa3, 0x58, 0x0e, 0xd3, 0xc0, 0x0d, 0x19, 0xf1,
	0x42, 0x26, 0x08, 0x13, 0xd9, 0x73, 0x2c, 0xfa, 0x89, 0x27, 0x27, 0x23, 0x2c, 0xdc, 0x0b, 0x1c,
	0xfa, 0x25, 0x12, 0xd3, 0x0e, 0x12, 0x5d, 0x85, 0x80, 0x37, 0x00, 0x04, 0x29, 0xa7, 0x3d, 0x8e,
	0x64, 0xcc, 0xec, 0xdc, 0x4e, 0xc0, 0xa2, 0x22, 0xf8, 0x0a, 0x00, 0xef, 0xc0, 0x3f, 0xb5, 0x1e,
	0xea, 0x3f, 0xa5, 0x42, 0x12, 0x4c, 0xa5, 0xb0, 0xf3, 0xb5, 0x7c, 0xa3, 0x74, 0x52, 0x73, 0x7f,
	0x7d, 0xd8, 0xed, 0x20, 0x71, 0xbe, 0x2e, 0x6c, 0x59, 0x6a, 0xaa, 0xff, 0x37, 0xda, 0x0c, 0x0a,
	0xd8, 0x06, 0x25, 0x05, 0xe4, 0x78, 0x90, 0xd2, 0xbe, 0xb0, 0x2d, 0x0d, 0xab, 0x6c, 0x87, 0xf9,
	0xba, 0x28, 0x03, 0x81, 0xe8, 0x3b, 0x20, 0xea, 0x67, 0xa0, 0xfc, 0x63, 0x16, 0x84, 0xc0, 0x52,
	0xeb, 0xaf, 0x04, 0xf4, 0xb5, 0x0d, 0xf7, 0x41, 0x01, 0x11, 0x96, 0x52, 0xa9, 0x55, 0xb0, 0xfc,
	0xcc, 0xab, 0x27, 0xa0, 0xb8, 0x66, 0x6f, 0x6d, 0xbc, 0x02, 0x7f, 0x06, 0x1c, 0x85, 0x32, 0x66,
	0x74, 0x47, 0x01, 0xd7, 0xfd, 0xad, 0xf6, 0x74, 0xe1, 0x98, 0xb3, 0x85, 0x63, 0x7e, 0x2e, 0x1c,
	0xf3, 0x75, 0xe9, 0x18, 0xb3, 0xa5, 0x63, 0xbc, 0x2f, 0x1d, 0xe3, 0xf1, 0x68, 0x83, 0x75, 0xfd,
	0x70, 0x7f, 0x79, 0x8b, 0xe5, 0x33, 0xe3, 0x89, 0x17, 0x0e, 0x51, 0x4c, 0xbd, 0x97, 0xd5, 0xa1,
	0x69, 0x64, 0x50, 0xd0, 0x97, 0x73, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x63, 0x5b, 0xea,
	0x82, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasRefunds) > 0 {
		for iNdEx := len(m.GasRefunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasRefunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GasAdjustments) > 0 {
		for iNdEx := len(m.GasAdjustments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasAdjustments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.BurnRatio.Size()
		i -= size
		if _, err := m.BurnRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MinGasPrice.Size()
		i -= size
		if _, err := m.MinGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GasAdjustment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasAdjustment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasAdjustment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintFees(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintFees(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Fraction.Size()
		i -= size
		if _, err := m.Fraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintFees(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFees(dAtA []byte, offset int, v uint64) int {
	offset -= sovFees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinGasPrice.Size()
	n += 1 + l + sovFees(uint64(l))
	l = m.BurnRatio.Size()
	n += 1 + l + sovFees(uint64(l))
	if len(m.GasAdjustments) > 0 {
		for _, e := range m.GasAdjustments {
			l = e.Size()
			n += 1 + l + sovFees(uint64(l))
		}
	}
	if len(m.GasRefunds) > 0 {
		for _, e := range m.GasRefunds {
			l = e.Size()
			n += 1 + l + sovFees(uint64(l))
		}
	}
	return n
}

func (m *GasAdjustment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovFees(uint64(m.Amount))
	}
	return n
}

func (m *GasRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	l = m.Fraction.Size()
	n += 1 + l + sovFees(uint64(l))
	return n
}

func sovFees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFees(x uint64) (n int) {
	return sovFees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAdjustments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasAdjustments = append(m.GasAdjustments, GasAdjustment{})
			if err := m.GasAdjustments[len(m.GasAdjustments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRefunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasRefunds = append(m.GasRefunds, GasRefund{})
			if err := m.GasRefunds[len(m.GasRefunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasAdjustment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasAdjustment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasAdjustment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFees = fmt.Errorf("proto: unexpected end of group")
)
